Elograf

This program is an utility for launching and configuring nerd-dictation for voice recognition.

Usage

It is intended to be launched at start of the desktop environnement to display an icon in the icons tray. Use your favorite desktop settings manager to add the command 'elograf' launched at start.

The tray icon menu lets you start, suspend, resume or stop dictation, open Preferences, and exit the application.

When selecting the option "Active direct click on icon", and after a restart, a click on the icon launches nerd-dictation. A new press stops it. With right click, the utility can be exited or configured.

The icon reflects the state of the dictation (loading, ready, dictating, suspended, stopped). You can also suspend and resume dictation from the tray menu or via dedicated shortcuts.

The configuration dialogue contains a table list of all models which are installed on the system and which can be selected.
Models can be directly downloaded from alphacei website and stored either in the user or system space. For storing in the system space, root credentials are asked through polkit mechanism.
You can also select a directory where a model resides. You have to give it a unique name.
The configuration dialog is displayed if no model has been set previously.
In Advanced dialogue, you can set an optionnal precommand which is launched before nerd-dictation itself. Another line is for optionnal postcommand which is launched after nerd-dictation is stopped.
You can also select or define some options which are passed to nerd-dictation.
You can select the input simulation tool in XDOTOOL (used by default) and DOTOOL. DOTOOL should be used for Wayland environment and you have to specify the keyboord layout code with a two letters code like 'fr' or 'de' if you don't use the 'us' layout.

Global Keyboard Shortcuts (KDE only):
If you have PyQt6-DBus installed and are running on KDE, you can configure global keyboard shortcuts in the Advanced settings dialog. These shortcuts will work system-wide even when Elograf is running in the background.

The start can take a long time, according to the size of the model.

Command Line Interface

Elograf supports single-instance mode with inter-process communication. This allows you to control a running instance from the command line.

Options:
    -l, --log <level>       : output information according to the level, where <level> is a standard level in Python
    --begin                 : begin dictation in running instance (or launch if not running)
    --end                   : end dictation in running instance
    --exit                  : exit the running instance
    --list-models           : list all available models (shows current selection with ‚óè)
    --set-model MODEL_NAME  : set the active model by name

Examples:
    elograf                        : Launch the application (system tray icon)
    elograf --begin                : Start dictation in the running instance
    elograf --end                  : Stop dictation in the running instance
    elograf --exit                 : Exit the running application
    elograf --list-models          : Show all configured models and their details
    elograf --set-model vosk-en-us : Change active model to 'vosk-en-us'
    elograf --version              : Show version and exit

Note: Only one instance of Elograf can run at a time. Commands are sent to the running instance via IPC (D-Bus on Linux/KDE, or local sockets on other platforms).

Daemon Management:

Elograf runs as a background daemon and can be managed using standard Unix signals:
    kill $(cat ~/.config/Elograf/elograf.pid)     : Send SIGTERM for graceful shutdown
    kill -HUP $(cat ~/.config/Elograf/elograf.pid) : Send SIGHUP to reload

The daemon handles the following signals gracefully:
- SIGTERM: Stop dictation, cleanup resources, and exit
- SIGINT (Ctrl+C): Same as SIGTERM
- SIGHUP: Graceful shutdown

PID file location: ~/.config/Elograf/elograf.pid


Installation

Method 1: Using uv (Recommended)

uv is a fast Python package and project manager. This is the recommended installation method as it handles dependencies automatically.

Install as a tool (globally available):
    uv tool install git+https://github.com/papoteur-mga/elograf

For development installation from local directory:
    uv pip install .

Note:
- nerd-dictation is not included and needs to be installed separately
- PyQt6 includes D-Bus support by default, enabling global keyboard shortcuts on KDE

Method 2: Using pip

In command line, as root for system wide installation, or as user for a local installation:
    pip install .

In case of local installation, be sure that ~/.local/bin is in the PATH variable.
nerd-dictation is not included and needs to be installed separately.

Python modules requirements:
- ujson
- urllib
- PyQt6 (includes D-Bus support for global shortcuts on KDE)

Under the hood

This tool is written in Python 3 and use Qt6.

File locations:
- Configuration file: ~/.config/Elograf/Elograf.conf
- PID file (daemon): ~/.config/Elograf/elograf.pid
- User models: ~/.config/vosk-models
- System models: /usr/share/vosk-models
- Translations: /usr/share/elograf/translations

Inter-Process Communication:
Elograf uses an adaptive IPC (Inter-Process Communication) system:
- On Linux with D-Bus available: Uses D-Bus for communication and KGlobalAccel for global shortcuts
- On other platforms or without D-Bus: Uses Qt Local Sockets (QLocalServer/QLocalSocket)
Both implementations support single-instance detection and CLI commands (--begin, --end, --exit)

Daemon Behavior:
- Automatically forks to background on Unix systems (detaches from console)
- Writes PID to ~/.config/Elograf/elograf.pid
- Handles signals (SIGTERM, SIGINT, SIGHUP) for graceful shutdown
- Cleans up resources (dictation, IPC, PID file) on exit
